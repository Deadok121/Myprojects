#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <locale.h>
#include <ctype.h>
#pragma warning(disable : 4996)
#define STRLEN 100
typedef struct
{
	int StartHourReception;
	int EndHourReception;
	char Speciality[STRLEN];
	char Name[STRLEN];
	char Surname[STRLEN];
}Doctor;

void out(FILE *f, Doctor *addDoctor, int size)
{
	fwrite(&size, sizeof(int), 1, f);
	fwrite(addDoctor, sizeof(Doctor), size, f);
}

void in(FILE *f, Doctor *addDoctor, int *size)
{
	fread(size, sizeof(int), 1, f);
	fread(addDoctor, sizeof(Doctor), *size, f);
}

Doctor addDoctor() {
	Doctor newDoctor;
	printf("Имя доктора: ");
	scanf("%s", &newDoctor.Name);
	printf("Фамилия: ");
	scanf("%s", &newDoctor.Surname);
	printf("Начинает приём (ч): ");
	while (true)
	{
		
		int start;
		
		if (scanf("%d", &start) != 1) {
			printf("Не корректное время приёма.Введите время от 8 до 20 часов.\n");
			fseek(stdin, 0, SEEK_END);
			continue;
		}
		if (start < 21 && start >7)
		{
			newDoctor.StartHourReception = start;
			break;
		}
		printf("Не корректное время приёма.Введите время от 8 до 20 часов.\n");
	}
	printf("Заканчивает приём (ч): ");
	while (true)
	{
		int end;
		if (scanf("%d", &end) != 1) {
			printf("Не корректное время приёма.Введите время от 8 до 20 часов.\n");
			fseek(stdin, 0, SEEK_END);
			continue;
		}
		if (end < 21 && end > 7 && newDoctor.StartHourReception < end)
		{
			newDoctor.EndHourReception = end;
			break;
		}
		printf("Не корректное время приёма.Введите время от 8 до 20 часов.\n");
		fflush(stdout);
	}
	printf("Специальность: ");
	scanf("%s", &newDoctor.Speciality);
	return newDoctor;
}

void show(Doctor *dct, int size)
{
	int i;
	for (i = 0; i< size; i++)
	{
		printf("\nИмя найденного доктора: %s \nФамилия: %s \nСпециальность: %s \nВремя работы: c %d до %d ч\n"
			, dct[i].Name, dct[i].Surname, dct[i].Speciality, dct[i].StartHourReception, dct[i].EndHourReception);
	}
}

void find(Doctor *dct, int size)
{
	printf("Укажите имя,фамилию или специальность врача :");
	char parameter[STRLEN];
	scanf("%s", &parameter);
	for (int i = 0; i< size; i++)
		if (!strcmp(dct[i].Name, parameter) ||
			!strcmp(dct[i].Surname, parameter) ||
			!strcmp(dct[i].Speciality, parameter))
			printf("\nИмя найденного доктора: %s \nФамилия: %s \nСпециальность: %s \nВремя работы: c %d до %d ч\n"
				, dct[i].Name, dct[i].Surname, dct[i].Speciality, dct[i].StartHourReception, dct[i].EndHourReception);
}

int nameCmp(const void *f, const void *s)
{
	return strcmp(((Doctor*)f)->Name, ((Doctor*)s)->Name) > 0;
}

int speciality(const void *f, const void *s)
{
	return (((Doctor*)f)->Speciality - ((Doctor*)s)->Speciality<0);
}

void printMenu()
{
	printf("Введите:\n|1| - добавить доктора в поликлиннику\n");
	printf("|2| - уволить доктора\n");
	printf("|3| - увидеть врачей (сортировка по именам)\n");
	printf("|4| - увидеть врачей (сортировка по фамилиям)\n");
	printf("|5| - редактировать данные врача\n");
	printf("|6| - найти врача поиск\n");
	printf("|0| - выйти\n>");
	printf("\n");
}

int main()
{
	setlocale(LC_ALL, "");
	Doctor mp[100];
	int size = 0;
	FILE *f = fopen("file", "rb");
	if (f)
	{
		in(f, mp, &size);
		fclose(f);
	}
	f = fopen("file", "wb");
	int i = 0;
	char flag_wasNextLine = 0;
	while (1)
	{
		if (!flag_wasNextLine)
		{
			printMenu();
		}
			char tmpc, prevc = 0;
			i = 0;
			while ((tmpc = getchar()) != '\n')
			{
				i++;
				prevc = prevc * 10 + tmpc;
			}
			if (i == 0)
				flag_wasNextLine = 1;
			else
				flag_wasNextLine = 0;

			i = prevc - '0';
			char name[STRLEN];
			char surname[STRLEN];
			int a = 0;
			int pos = -1;
			switch (i) {
			case 1:
				mp[size] = addDoctor();
				size++;
				break;
			case 2:
				printf("\nУвольняем врача по имени: ");
				scanf("%s", &name);
				printf("\nС фамилией: ");
				scanf("%s", &surname);
				pos =-1;
				for (int a = 0; a < size; a++) {
				if (!(strcmp(mp[a].Name, name) == 1) && (!
					strcmp(mp[a].Surname, surname)== 1)) {
					pos = a;
					break;
				}
				}
				if (pos != -1 ) {
					size--;
					for (; pos < size; pos++)
						mp[pos] = mp[pos + 1];
					printf("Уволен.\n\n");
					break;
				}
				else {
					printf("Не найден.\n\n");
				}
				break;
			case 3:
				qsort(mp, size, sizeof(Doctor), nameCmp);
				show(mp, size);
				break;
			case 4:
				qsort(mp, size, sizeof(Doctor), speciality);
				show(mp, size);
				break;
			case 5:
				char paramName[STRLEN];
				char paramSurname[STRLEN];
				printf("\Введите имя врача : ");
				scanf("%s", &name);
				printf("С фамилией: ");
				scanf("%s", &surname);
				for (int j = 0; j < size; j++) {
					
					if (strcmp(mp[i].Name, paramName)  &&
						strcmp(mp[j].Surname, paramSurname) )
					{
						mp[j] = addDoctor();
						printf("Данные изменены\n");
					}
					else {
						printf("Врач не найден.\n");
					}
				}
				break;
			case 6:
				find(mp, size);
				break;
			case 0:
				out(f, mp, size);
				fclose(f);
				exit(0);
			default:
				break;
			}
	}
}
