#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <locale.h>
#pragma warning(disable : 4996)
#define STRLEN 100
typedef struct
{
	int StartHourReception;
	int EndHourReception;
	char Speciality[STRLEN];
	char Name[STRLEN];
	char Surname[STRLEN];
}Doctor;

void out(FILE *f, Doctor *addDoctor, int size)
{
	fwrite(&size, sizeof(int), 1, f);
	fwrite(addDoctor, sizeof(Doctor), size, f);
}

void in(FILE *f, Doctor *addDoctor, int *size)
{
	fread(size, sizeof(int), 1, f);
	fread(addDoctor, sizeof(Doctor), *size, f);
}

Doctor addDoctor() {
	Doctor newDoctor;
	printf("Имя доктора: ");
	scanf("%s", &newDoctor.Name);
	printf("Фамилия: ");
	scanf("%s", &newDoctor.Surname);
	while(true)
	{
		printf("Начинает приём (ч): ");
		int start;
		scanf("%d", &start);
		if(start < 21 && start >7)
		{
			newDoctor.StartHourReception = start;
			break;
		}
		printf("Не корректное время приёма.Введите время от 8 до 20 часов.\n");
	}
	
	while (true)
	{
		printf("Заканчивает приём (ч): ");
		int end;
		scanf("%d", &end);
		if (end < 21 && end > 7 && newDoctor.StartHourReception < end)
		{
			newDoctor.EndHourReception = end;
			break;
		}
		printf("Не корректное время приёма.Введите время от 8 до 20 часов.\n");
		fflush(stdout);
	}
	printf("Специальность: ");
	scanf("%s", &newDoctor.Speciality);
	return newDoctor;
}

void show(Doctor *dct, int size)
{
	int i;
	for (i = 0; i< size; i++)
	{
		printf("\nИмя найденного доктора: %s \nФамилия: %s \nСпециальность: %s \nВремя работы: c %d до %d ч\n"
			, dct[i].Name, dct[i].Surname,dct[i].Speciality,dct[i].StartHourReception,dct[i].EndHourReception);
	}
}

void find(Doctor *dct, int size)
{
	printf("Укажите имя,фамилию или специальность врача :");
	char parameter[STRLEN];
	scanf("%s", &parameter);
	for (int i = 0; i< size; i++)
		if (strcmp(dct[i].Name , parameter) ||
			strcmp(dct[i].Surname , parameter) ||
			strcmp(dct[i].Speciality , parameter))
			printf("\nИмя найденного доктора: %s \nФамилия: %s \nСпециальность: %s \nВремя работы: c %d до %d ч"
				, dct[i].Name, dct[i].Surname, dct[i].Speciality, dct[i].StartHourReception, dct[i].EndHourReception);
}

int nameCmp(const void *f, const void *s)
{
	return strcmp(((Doctor*)f)->Name, ((Doctor*)s)->Name) > 0;
}

int speciality(const void *f, const void *s)
{
	return (((Doctor*)f)->Speciality - ((Doctor*)s)->Speciality<0);
}

void printMenu()
{
	printf("Введите:\n|1| - если хотите добавить доктора в поликлиннику\n");
	printf("|2| - если хотите уволить доктора\n");
	printf("|3| - если хотите увидеть врачей по именам\n");
	printf("|4| - если хотите увидеть врачей по фамилиям\n");
	printf("|5| - если хотите редактировать данные врача фамилиям\n");
	printf("|6| - если хотите открыть поиск\n");
	printf("|0| - если хотите выйти\n>");
	printf("\n");
}

int main()
{
	setlocale(LC_ALL, "");
	Doctor mp[100];
	int size = 0;
	FILE *f = fopen("file", "rb");
	if (f)
	{
		in(f, mp, &size);
		fclose(f);
	}
	f = fopen("file", "wb");
	while(true)
	{
		printMenu();
		char name[STRLEN];
		char surname[STRLEN];
		char i;
		scanf("%c", &i);
		switch (i) {
		case *"1":
			mp[size] = addDoctor();
			size++;
			break;
		case *"2":
			printf("\nУвольняем врача по имени: ");
			scanf("%s", &name);
			printf("\nС фамилией: ");
			scanf("%s", &surname);
			for (int a =0; a< size; a++)
				if(strcmp(mp[a].Name,name) &&
					strcmp(mp[a].Surname,surname))
			{
				mp[a] = mp[a + 1];
				--size;
				printf("Уволен.\n\n");
			}else
			{
					printf("Не найден.\n\n");
			}
			break;
		case *"3":
			qsort(mp, size, sizeof(Doctor), nameCmp);
			show(mp, size);
			break;
		case *"4":
			qsort(mp, size, sizeof(Doctor), speciality);
			show(mp, size);
			break;
		case *"5":
			printf("\Введите имя врача : ");
			scanf("%s", &name);
			printf("\n С фамилией: ");
			scanf("%s", &surname);
			for (int j =0 ; j< size; j++)
				if (strcmp(mp[j].Name, name) &&
					strcmp(mp[j].Surname, surname))
			{
				mp[j] = addDoctor();
				printf("Данные изменены\n");
			}
			break;
		case *"6":
			find(mp, size);
			break;
		case *"0":
			out(f, mp, size);
			fclose(f);
			exit(0);
		default:
			break;
		}
	}
}
